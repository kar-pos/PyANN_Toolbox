using System;
using System.Linq;

public class TGA_ANN
{
    // Structure definition
    public class StructType
    {
        public double[] xoffset { get; set; }
        public double[] gain { get; set; }
        public double ymin { get; set; }

        public void Set(params (string, object)[] args)
        {
            foreach (var (lab, val) in args)
            {
                this.GetType().GetProperty(lab)?.SetValue(this, val);
            }
        }

        public void SetAttr(string lab, object val)
        {
            this.GetType().GetProperty(lab)?.SetValue(this, val);
        }
    }

    // The main function
    public double[] ANN_output(double[] x1)
    {
        StructType x1_step1 = new StructType();
        StructType y1_step1 = new StructType();
        x1 = x1.Select(i => i).ToArray();
        x1 = x1.Select(i => i).ToArray();

        // ===== NEURAL NETWORK CONSTANTS =====

        // Input 1
        x1_step1.Set(("xoffset", new double[] { 2, 33, 27.11, 1.2 }),
                     ("gain", new double[] { 0.0204081632653061, 4.40528634681442e-11, 0.0176850296224246, 0.625 }),
                     ("ymin", -1.0));

        // Output 1
        y1_step1.Set(("ymin", -1.0),
                     ("gain", new double[] { 0.0303122158229767, 0.0405679513184584, 0.0466744457409568 }),
                     ("xoffset", new double[] { 7.82, 10.07, 7.85 }));

        // ===== SIMULATION ========

        // Dimensions
        int Q = x1.Length; // samples

        // Input 1
        double[,] xp1 = MapMinMaxApply(x1, x1_step1);

        // Layer 1
        double[,] a1 = TansigApply(AddMatrix(B1, DotProduct(IW1_1, xp1)));

        // Layer 2

        double[,] a2 = RadbasnApply(AddMatrix(B2, DotProduct(LW2_1, a1)));

        // Layer 3
        double[,] a3 = AddMatrix(B3, DotProduct(LW3_2, a2));

        // Output 1
        double[,] y1 = MapMinMaxReverse(a3, y1_step1);
        return y1.Cast<double>().ToArray();
    }

    // ===== MODULE FUNCTIONS ========

    // Map Minimum and Maximum Input Processing Function
    public double[,] MapMinMaxApply(double[] x, StructType settings)
    {
        double[,] y = new double[x.Length, 1];
        for (int i = 0; i < x.Length; i++)
        {
            y[i, 0] = (x[i] - ((double[])settings.GetType().GetProperty("xoffset").GetValue(settings))[i]) *
                      ((double[])settings.GetType().GetProperty("gain").GetValue(settings))[i] +
                      (double)settings.GetType().GetProperty("ymin").GetValue(settings);
        }
        return y;
    }

    // Radial Basis, Normalized Transfer Function
    public double[,] RadbasnApply(double[,] n)
    {
        int rows = n.GetLength(0);
        int cols = n.GetLength(1);
        double[,] a = new double[rows, cols];

        for (int j = 0; j < cols; j++)
        {
            double minAbsN = Enumerable.Range(0, rows).Select(i => Math.Abs(n[i, j])).Min();
            for (int i = 0; i < rows; i++)
            {
                a[i, j] = Math.Exp(-n[i, j] * n[i, j] + minAbsN * minAbsN);
            }
        }

        for (int j = 0; j < cols; j++)
        {
            double suma = 0.0;
            for (int i = 0; i < rows; i++)
            {
                suma += a[i, j];
            }
            for (int i = 0; i < rows; i++)
            {
                a[i, j] /= suma;
            }
        }

        return a;
    }

    // Sigmoid Symmetric Transfer Function
    public double[,] TansigApply(double[,] n)
    {
        int rows = n.GetLength(0);
        int cols = n.GetLength(1);
        double[,] a = new double[rows, cols];

        for (int j = 0; j < cols; j++)
        {
            for (int i = 0; i < rows; i++)
            {
                a[i, j] = 2 / (1 + Math.Exp(-2 * n[i, j])) - 1;
            }
        }

        return a;
    }

    // Map Minimum and Maximum Output Reverse-Processing Function
    public double[,] MapMinMaxReverse(double[,] y, StructType settings)
    {
        int rows = y.GetLength(0);
        int cols = y.GetLength(1);
        double[,] x = new double[rows, cols];

        for (int j = 0; j < cols; j++)
        {
            for (int i = 0; i < rows; i++)
            {
                x[i, j] = (y[i, j] - (double)settings.GetType().GetProperty("ymin").GetValue(settings)) /
                          ((double[])settings.GetType().GetProperty("gain").GetValue(settings))[i] +
                          ((double[])settings.GetType().GetProperty("xoffset").GetValue(settings))[i];
            }
        }

        return x;
    }

    // Helper function to add matrices with broadcasting
    public double[,] AddMatrix(double[,] matrix1, double[,] matrix2)
    {
        int rows = matrix1.GetLength(0);
        int cols = matrix2.GetLength(1);
        double[,] result = new double[rows, cols];

        for (int j = 0; j < cols; j++)
        {
            for (int i = 0; i < rows; i++)
            {
                result[i, j] = matrix1[i, j] + matrix2[i, j];
            }
        }

        return result;
    }

    // Helper function to compute the dot product
    public double[,] DotProduct(double[,] matrixA, double[,] matrixB)
    {
        int rowsA = matrixA.GetLength(0);
        int colsA = matrixA.GetLength(1);
        int colsB = matrixB.GetLength(1);
        double[,] result = new double[rowsA, colsB];

        for (int i = 0; i < rowsA; i++)
        {
            for (int j = 0; j < colsB; j++)
            {
                double sum = 0;
                for (int k = 0; k < colsA; k++)
                {
                    sum += matrixA[i, k] * matrixB[k, j];
                }
                result[i, j] = sum;
            }
        }

        return result;
    }

    // Neural network weights and biases (assuming you have these values)
    public double[,] B1 = {{-3.5042780150778956028}, {2.2031924689799256001}, {1.3432849000220552504}, {1.011530935508660356}, {0.081655350970725598669}, {0.12548593758954584843}, {-0.36463697466056388397}, {-0.80688719679044884625}, {-1.4533551332877983064}, {-1.9625471394374354173}, {-2.6469429851636041562}};
    public double[,] IW1_1 = {
        {0.36798331098542991224, 0.62446668280147510366, -1.0408863741405804948, 2.3121545202687516785},
        {-0.31745023851709652796, -1.205289988325797701, -1.5127754639990549368, 1.4584393510496429514},
        {-0.89968980775981055586, 0.94417760624634894384, -1.0454126585847405284, -2.6421293690488605321},
        {-2.5243664168425361538, 0.77000776449581054273, 1.3927477048793808212, 0.29478636413696868157},
        {-0.28845270146174639692, 0.15313880561104642464, -2.8222014307805558531, -1.3976200501198050574},
        {1.3226397302558647873, -0.50160664705747748382, -2.244997699574249328, 0.75496001888721187001},
        {-1.6055906605546927945, -0.11355417640648768351, 1.2864850763316619808, 1.1376630224420176685},
        {-1.764099906687991659, -0.095243499047330149043, -1.0655890407065262693, 1.5344060302559083819},
        {-1.0752700040518547997, 0.55205054089314420374, 3.1775137912782986938, -0.66094791438681221862},
        {-2.4294451644861729811, -0.44480312971035684821, -0.28299373569378255544, -0.86531573208889212001},
        {-1.3903401165541939832, -0.60302226401819447599, -1.2913943687255995396, 2.9015719174633414212}};
    
    public double[,] B2 = {{-1.6698818603256979642},{-1.7376099354309393341},{-1.4013008490493181757},{0.74784409993497058533},{0.87850215197169700954},{-0.37967623361679331273},{0.68881015892546992863},{-0.070596514953586653185},{0.025233014605056627855},{-0.74067107347552718632},{ 0.36182312982350012254},{-0.72499029685908122911},{-0.95741531292093751127},{1.5054158524779304162},{1.7374883187085894409 },{-1.6940516400980873968 }};
    public double[,] LW2_1 = {
        {0.67021953014336410615,-0.28191315169894320958,-0.24909345316833955697,-0.64509702383248246349,0.48681757064066777385,-0.36536658674334449026,-0.15948356336438715419,-1.1393699494757514312,0.32476471089926928215,2.0226014837984562789,0.4564823001498700128},
         {0.2852187062818638541,-0.26029132010195343838,-2.6644876417333001051,0.87260582222280458353,-0.24305251672534697316,0.78940290867742191061,0.27088670190769381652,0.37357857408900063678,0.42352772538096072896,-0.99935631894275278597,0.50432830943338069485},
         {0.79851343155209641989,0.40199995395853227453,0.14619748860533376966,-0.66284947147654105226,0.11539176792942421046,-1.0828998358530703694,-0.41444969518056101743,-0.17807616843370832616,-0.44981367277683226291,0.1823869912496037804,0.61602869155730310968},
         {-0.54716484678073240566,-0.59344641940769893296,-0.80813584651740544285,-0.51216061994609840546,-1.8402620762050307945,0.46078247599971350335,-0.35802834295452268254,-2.7976459593487290611,0.68129633166642467046,-0.7129435644079276102,1.1272735955339134861},
         {-0.4338196697598236673,0.20861390876335778044,0.77542841844525511874,-0.79163054242073493949,-0.6078156492313380177,-0.34557835884025367434,2.1535957481956162773,0.66986887929173699607,-0.32733912503565604224,-0.41256770491286892666,0.37989486405895850352},
         {0.11230876009722974562,-0.43973185958190025291,1.1601087310053173063,-0.5802032601735348516,0.86345953853265122735,-0.44829579478598124975,0.64345628140989563626,-0.19239781244351411571,-2.3124424594340142747,0.43957977336375148036,0.35026316425822218159},
         {-1.0379982733634178782,-0.31731411753013194499,2.6529685962084119666,1.007407604052719341,-0.24033031305802995958,0.31735071338698733756,-0.40892151194846199092,-0.70480283125217813023,0.055914716730674940415,0.97928926730924470423,-0.041325718310286051194},
         {0.21509368949400026194,-0.42037858460804344851,0.29128132352137348082,-0.33105278895006801099,1.448915382778407146,-0.36856735810403173925,-2.2377645505287531158,-0.61413209440716642895,-0.92355117928183705356,0.46477385386438757608,0.17817475059710408125},
         {0.95759395849269413059,0.48233392969985783294,-0.15833755478499750291,0.68725762788057853658,0.17594297447326326389,-0.47979665329412024555,-0.10775548810301464886,0.15702863247594131546,-0.11408496437603579676,0.93989473052847993806,-0.32907593955862202151},
         {0.0060614990564853334781,-1.164945390522978963,0.092423376561288586584,-0.14913018886437678923,0.72976297474647178198,0.47701803588381425092,-0.37688298472028869401,-0.39535978467228077848,0.9550613241069924042,-0.88770957198222910645,0.825246850564074097},
         {0.70437605411265724609,-1.1895933672500123013,-0.93464211741269642708,0.1724396999091312721,-0.91103520377808289155,0.32449000948343181827,0.78954919956047631135,1.0536893999814997969,1.3421483229356612199,-2.6032649380269239359,-0.45497919258912611351},
         {-0.69701964110153380449,-0.65936315641603115978,0.33325652606852407267,0.9012664861285067941,0.2418073622364047548,2.9253449491396419369,0.90738640579784946016,1.4848789380050109177,-0.99621018520063342461,-0.40779366011156820138,-0.45147631494881201863},
         {-0.29260778483363897307,0.71059808722744366438,0.23196287730064873989,-0.33830027913800375661,-0.44006645034169727948,-1.0003856499411281078,0.36242743024048906797,-0.17245691752339742386,-1.1033793699752290074,-0.39109840183038019346,-1.0381220548667160486},
         {0.4405100644289000611,0.96261422297467302833,1.0218358085920269396,0.99380980989633038725,0.041709275078683320792,0.43753646352491509797,-0.70560468484156446678,-0.44401233791276262242,-0.19646712632849086533,1.614741753854021411,-0.16616822271616876749},
         {0.69071750302507806119,0.23665200991444615419,2.727151412532589525,0.084697311636901168042,0.40107601938008369258,0.69118361650117321471,-0.19086505346506213443,-0.032592318267797154574,0.50755624118676612166,1.0481205129788271346,-1.1510589718230646028},
         {-0.70963905899865342697,0.82014838474422857573,-0.65153316565246022218,-0.38678911342900201831,-0.97715725789763108189,2.5727288404073389572,0.78760880521555054479,1.8154455825165507488,-0.71790934677192885793,0.073206603735799860577,-0.54691111131363989717} };


    public double[,] B3 = {{-0.33445102552412608876},{0.39352878370843435984},{0.19130529016029948486}};
    public double[,] LW3_2 = {
        {0.58362563828319757864,-1.3523205608021422464,-1.1088335691285227114,-0.41783741569883320333,-0.72195504561080914296,0.81992327252768237855,-0.91834535570897357637,0.67604236722510191449,1.1609857822550686546,-2.2750503620504307634,1.7125805190990055493,-1.0706898724683702184,0.56838986686450687635,-2.6079489679163345706,-2.0175480435622614728,1.0272918389047998033},
        {1.0882237987510632315,2.5716228622656105429,0.38759996877203611865,-0.51096208122693098641,-0.19649308140051224836,-1.3763238170091158796,2.1542790510557088268,-1.2992573694786897498,-1.144583601248488236,-1.8796183484748827386,-1.9327972562081077168,-0.062224359908442633538,-1.1669369050867191007,0.76485752738815404594,2.3931785455718221911,-1.4614891906245146558},
        {-1.0452995453288960181,-1.6820781534558868486,-2.5058905733191290111,0.63286896126048264311,0.43457073264111911737,-0.17240848320879753608,-1.9319931582801355141,-0.30109532818754008998,-1.1983765288438170682,-0.51089039803170710474,-0.98821883449460046211,1.3394159218259715782,-1.5814846432789206876,-1.4819586050049424752,-0.52473628351535561709,-1.4596818069252279759} };
  }
